<style is:global>
    /* Reset default margins and paddings */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    /* Hero Section Styling */
    .hero-section {
        position: relative;
        width: 100%;
        height: 100vh; /* Full viewport height */
        background-color: #f0f8ff; /* Light background for contrast */
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden; /* Hide overflow to contain bubbles */
    }

    /* Hero Content Styling */
    .hero-content {
        position: relative; /* Ensure content is above bubbles */
        z-index: 1;
        text-align: center;
        color: #333;
        font-family: Arial, sans-serif;
    }

    .hero-content h1 {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .hero-content p {
        font-size: 1.5rem;
    }

    /* Bubble Container Styling */
    .bubble-container {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
        top: 0;
        left: 0;
        pointer-events: none; /* Allows interactions to pass through */
    }

    /* Common Bubble Styles */
    .bubble {
        position: absolute;
        bottom: -100px; /* Start below the visible area */
        left: 0; /* Start from the left */
        border-radius: 50%;
        opacity: 0;
        border: 0.8px solid var(--bubble-color);
        box-shadow: 0 0 3px var(--bubble-color);
        animation: rise linear infinite;
        will-change: transform, opacity;
    }

    /* Keyframes for Rising Animation */
    @keyframes rise {
        0% {
            transform: translateX(0) translateY(0) scale(0.5);
            opacity: 0;
        }
        10% {
            opacity: 1;
        }
        90% {
            opacity: 1;
        }
        100% {
            transform: translateX(var(--translate-x)) translateY(-110vh) scale(1.5);
            opacity: 0;
        }
    }
</style>
<div id="bubble-container"><!-- Just one bubble --></div>

<script is:inline>
    if (typeof window !== 'undefined') {
        // Immediately Invoked Function Expression to avoid polluting global scope
        (function () {
            const container = document.getElementById('bubble-container');
            const numberOfBubbles = 20; // Number of bubbles on screen simultaneously
            const colors = ['#3498db', '#e74c3c', '#f1c40f', '#2ecc71', '#9b59b6', '#e67e22', '#1abc9c', '#34495e'];

            // Utility function to get a random number between min and max
            function getRandom(min, max) {
                return Math.random() * (max - min) + min;
            }

            // Function to create a bubble with randomized properties
            function createBubble() {
                const bubble = document.createElement('div');
                bubble.classList.add('bubble');

                // Random size between 20px and 60px
                const size = getRandom(20, 80);
                bubble.style.width = `${size}px`;
                bubble.style.height = `${size}px`;

                // Position bubbles starting from the bottom left corner
                bubble.style.left = `0px`;

                // Random translateX to spread across the x-axis (-50vw to +50vw)
                const translateX = getRandom(0, 100); // in vw
                bubble.style.setProperty('--translate-x', `${translateX}vw`);

                // Random border color and set CSS variable
                const color = colors[Math.floor(getRandom(0, colors.length))];
                bubble.style.setProperty('--bubble-color', color);

                // Random animation duration between 5s and 20s
                const duration = getRandom(5, 20);
                bubble.style.animationDuration = `${duration}s`;

                // Random animation delay to stagger the bubbles
                const delay = getRandom(0, duration);
                bubble.style.animationDelay = `${delay}s`;

                // Append the bubble to the container
                container.appendChild(bubble);

                // Remove the bubble after animation completes to prevent DOM overload
                bubble.addEventListener('animationend', () => {
                    bubble.remove();
                    createBubble(); // Recreate bubble to maintain constant number
                });
            }

            // Initialize bubbles
            for (let i = 0; i < numberOfBubbles; i++) {
                createBubble();
            }
        })();
    }
</script>
